import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold

from genius_scraper import GeniusScraper
from config import TELEGRAM_BOT_TOKEN


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


scraper = GeniusScraper()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    welcome_message = """
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lyrics Bot!

–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ª—é–±–æ–π –ø–µ—Å–Ω–∏ —Å Genius.com

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: "Bohemian Rhapsody Queen" –∏–ª–∏ "–ú–∞—Ä–∞—Ñ–µ—Ç—ã –î—ç–±–±—ç–∫–≤—É–¥"

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
    """
    await message.answer(welcome_message)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_message = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏:
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "Bohemian Rhapsody Queen"
‚Ä¢ "–ú–∞—Ä–∞—Ñ–µ—Ç—ã –î—ç–±–±—ç–∫–≤—É–¥"
‚Ä¢ "–ë–∞—Ä–∞—Ç—Ä–∏—É–º –ê–Ω–∞–∫–æ–Ω–¥–∞–∑"
‚Ä¢ "Hotel California Eagles"

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
‚Ä¢ –ë–æ—Ç –∏—â–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ Genius.com
‚Ä¢ –ï—Å–ª–∏ –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å

üîÑ –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - —Å–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    await message.answer(help_message)

@dp.message(F.text)
async def search_lyrics(message: Message):

    query = message.text.strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        search_msg = await message.answer("üîç –ò—â—É —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏...")
        
        # –ò—â–µ–º –ø–µ—Å–Ω—é (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
        result, error = scraper.search_song(query)
        
        if error:
            await search_msg.edit_text(f"‚ùå {error}")
            return
        
        if not result:
            await search_msg.edit_text("‚ùå –ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        

        title = result['title']
        lyrics = result['lyrics']
        url = result['url']
        

        response_text = f"üéµ {hbold(title)}\n\n{lyrics}\n\nüîó {url}"
        

        max_length = 4000
        if len(response_text) > max_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = f"üéµ {hbold(title)}\n\n"
            
            lines = lyrics.split('\n')
            for line in lines:
                if len(current_part + line + '\n') > max_length and current_part != f"üéµ {hbold(title)}\n\n":
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            

            await search_msg.delete()
            

            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode=ParseMode.HTML)
                else:
                    await message.answer(f"üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1}:\n{part}", parse_mode=ParseMode.HTML)
                await asyncio.sleep(0.3)
            
            await message.answer(f"üîó –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {url}")
        else:
            await search_msg.edit_text(response_text, parse_mode=ParseMode.HTML)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        try:
            await search_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.errors()
async def error_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞: {exception}")
    if update.message:
        await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return True

async def main():
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN=your_token_here")
        return
    

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
